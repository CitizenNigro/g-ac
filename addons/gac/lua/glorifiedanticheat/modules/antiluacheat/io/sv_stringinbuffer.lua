local
function⁭={elseif﻿='\x44\x61\x74\x61',⁪⁭false='\x50\x6F\x73\x69\x74\x69\x6F\x6E',elseif‪⁮='\x42\x69\x74\x43\x6F\x6E\x76\x65\x72\x74\x65\x72'}local
do⁮⁮=math.max
local
for‪=string.byte
local
﻿⁮then=string.find
local
or‪=string.sub
function
gAC.StringInBuffer(﻿⁭⁪not)local
self=gAC.InBuffer()self[function⁭.elseif﻿]=﻿⁭⁪not
or""self[function⁭.⁪⁭false]=1
function
self:GetBytesRemaining()return
do⁮⁮(0,#self[function⁭.elseif﻿]-self[function⁭.⁪⁭false]+1)end
function
self:GetPosition()return
self[function⁭.⁪⁭false]end
function
self:GetSize()return#self[function⁭.elseif﻿]end
function
self:IsEndOfStream()return
self[function⁭.⁪⁭false]>#self[function⁭.elseif﻿]end
function
self:Pin()return
self
end
function
self:SeekRelative(⁮else)self[function⁭.⁪⁭false]=self[function⁭.⁪⁭false]+⁮else
end
function
self:SeekAbsolute(elseif⁮⁪)self[function⁭.⁪⁭false]=elseif⁮⁪
end
function
self:UInt8()local
⁭for=for‪(self[function⁭.elseif﻿],self[function⁭.⁪⁭false],self[function⁭.⁪⁭false])self[function⁭.⁪⁭false]=self[function⁭.⁪⁭false]+1
return
gAC[function⁭.elseif‪⁮].UInt8sToUInt8(⁭for
or
0)end
function
self:UInt16()local
or﻿⁮⁭,⁪else=for‪(self[function⁭.elseif﻿],self[function⁭.⁪⁭false],self[function⁭.⁪⁭false]+1)self[function⁭.⁪⁭false]=self[function⁭.⁪⁭false]+2
return
gAC[function⁭.elseif‪⁮].UInt8sToUInt16(or﻿⁮⁭
or
0,⁪else
or
0)end
function
self:UInt32()local
⁭﻿⁮in,﻿﻿﻿function,⁮or,⁪elseif=for‪(self[function⁭.elseif﻿],self[function⁭.⁪⁭false],self[function⁭.⁪⁭false]+3)self[function⁭.⁪⁭false]=self[function⁭.⁪⁭false]+4
return
gAC[function⁭.elseif‪⁮].UInt8sToUInt32(⁭﻿⁮in
or
0,﻿﻿﻿function
or
0,⁮or
or
0,⁪elseif
or
0)end
function
self:UInt64()local
or⁪﻿⁮,local﻿﻿,false⁮⁭‪,if﻿﻿,⁭⁮nil,elseif﻿﻿⁪,⁪return,⁪⁭or=for‪(self[function⁭.elseif﻿],self[function⁭.⁪⁭false],self[function⁭.⁪⁭false]+7)self[function⁭.⁪⁭false]=self[function⁭.⁪⁭false]+8
return
gAC[function⁭.elseif‪⁮].UInt8sToUInt64(or⁪﻿⁮
or
0,local﻿﻿
or
0,false⁮⁭‪
or
0,if﻿﻿
or
0,⁭⁮nil
or
0,elseif﻿﻿⁪
or
0,⁪return
or
0,⁪⁭or
or
0)end
function
self:Int8()local
⁪continue=for‪(self[function⁭.elseif﻿],self[function⁭.⁪⁭false],self[function⁭.⁪⁭false])self[function⁭.⁪⁭false]=self[function⁭.⁪⁭false]+1
return
gAC[function⁭.elseif‪⁮].UInt8sToInt8(⁪continue
or
0)end
function
self:Int16()local
true⁮‪﻿,⁮repeat=for‪(self[function⁭.elseif﻿],self[function⁭.⁪⁭false],self[function⁭.⁪⁭false]+1)self[function⁭.⁪⁭false]=self[function⁭.⁪⁭false]+2
return
gAC[function⁭.elseif‪⁮].UInt8sToInt16(true⁮‪﻿
or
0,⁮repeat
or
0)end
function
self:Int32()local
⁮﻿in,repeat⁮,in‪⁮﻿,⁭﻿end=for‪(self[function⁭.elseif﻿],self[function⁭.⁪⁭false],self[function⁭.⁪⁭false]+3)self[function⁭.⁪⁭false]=self[function⁭.⁪⁭false]+4
return
gAC[function⁭.elseif‪⁮].UInt8sToInt32(⁮﻿in
or
0,repeat⁮
or
0,in‪⁮﻿
or
0,⁭﻿end
or
0)end
function
self:Int64()local
﻿then,⁮⁪false,function⁪,false⁮,⁪,⁪nil,⁮true,if⁭=for‪(self[function⁭.elseif﻿],self[function⁭.⁪⁭false],self[function⁭.⁪⁭false]+7)self[function⁭.⁪⁭false]=self[function⁭.⁪⁭false]+8
return
gAC[function⁭.elseif‪⁮].UInt8sToInt64(﻿then
or
0,⁮⁪false
or
0,function⁪
or
0,false⁮
or
0,⁪
or
0,⁪nil
or
0,⁮true
or
0,if⁭
or
0)end
function
self:Bytes(true⁪‪﻿)local
if⁪⁮⁮=or‪(self[function⁭.elseif﻿],self[function⁭.⁪⁭false],self[function⁭.⁪⁭false]+true⁪‪﻿-1)self[function⁭.⁪⁭false]=self[function⁭.⁪⁭false]+true⁪‪﻿
return
if⁪⁮⁮
end
function
self:String()return
self:StringN16()end
function
self:StringZ()local
elseif﻿⁪=﻿⁮then(self[function⁭.elseif﻿],"\0",self[function⁭.⁪⁭false],!!1)if
elseif﻿⁪
then
local
in‪⁮=or‪(self[function⁭.elseif﻿],self[function⁭.⁪⁭false],elseif﻿⁪-1)self[function⁭.⁪⁭false]=elseif﻿⁪+1
return
in‪⁮
else
local
⁪then=or‪(self[function⁭.elseif﻿],self[function⁭.⁪⁭false])self[function⁭.⁪⁭false]=#self[function⁭.elseif﻿]return
⁪then
end
end
function
self:LongString()return
self:StringN32()end
return
self
end