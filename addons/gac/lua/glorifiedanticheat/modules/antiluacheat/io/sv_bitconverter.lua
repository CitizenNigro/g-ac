local
repeat⁭﻿‪={⁭⁮goto='\x42\x69\x74\x43\x6F\x6E\x76\x65\x72\x74\x65\x72',continue⁭='\x55\x49\x6E\x74\x33\x32\x54\x6F\x55\x49\x6E\x74\x38\x73',repeat⁭='\x55\x49\x6E\x74\x38\x73\x54\x6F\x55\x49\x6E\x74\x33\x32'}gAC[repeat⁭﻿‪.⁭⁮goto]={}local
‪repeat=bit.band
local
﻿⁮else=bit.lshift
local
⁭⁭goto=bit.rshift
local
in‪⁭﻿=math.floor
local
continue⁪=math.frexp
local
⁭⁮‪else=math.ldexp
local
﻿⁭‪goto=math.huge
function
gAC.BitConverter.UInt8ToUInt8s(⁪⁮false)return
⁪⁮false
end
function
gAC.BitConverter.UInt16ToUInt8s(if﻿⁪)return
if﻿⁪%256,in‪⁭﻿(if﻿⁪/256)%256
end
function
gAC.BitConverter.UInt32ToUInt8s(⁪‪not)return
⁪‪not%256,in‪⁭﻿(⁪‪not/256)%256,in‪⁭﻿(⁪‪not/65536)%256,in‪⁭﻿(⁪‪not/16777216)%256
end
function
gAC.BitConverter.UInt64ToUInt8s(while⁭)return
while⁭%256,in‪⁭﻿(while⁭/256)%256,in‪⁭﻿(while⁭/65536)%256,in‪⁭﻿(while⁭/16777216)%256,in‪⁭﻿(while⁭/4294967296)%256,in‪⁭﻿(while⁭/1099511627776)%256,in‪⁭﻿(while⁭/281474976710656)%256,in‪⁭﻿(while⁭/72057594037927936)%256
end
function
gAC.BitConverter.UInt8sToUInt8(‪⁪else)return
‪⁪else
end
function
gAC.BitConverter.UInt8sToUInt16(end⁪,continue⁪⁮⁪)return
end⁪+continue⁪⁮⁪*256
end
function
gAC.BitConverter.UInt8sToUInt32(⁮goto,⁪⁪﻿false,‪⁭return,until⁭‪﻿)return
⁮goto+⁪⁪﻿false*256+‪⁭return*65536+until⁭‪﻿*16777216
end
function
gAC.BitConverter.UInt8sToUInt64(⁪⁭⁭return,not⁭,⁭⁮return,⁪⁮else,⁪‪continue,⁭⁭else,local⁮﻿,⁮﻿‪continue)return
⁪⁭⁭return+not⁭*256+⁭⁮return*65536+⁪⁮else*16777216+⁪‪continue*4294967296+⁭⁭else*1099511627776+local⁮﻿*281474976710656+⁮﻿‪continue*72057594037927936
end
function
gAC.BitConverter.Int8ToUInt8s(⁭﻿⁮continue)if
⁭﻿⁮continue<0
then
⁭﻿⁮continue=⁭﻿⁮continue+256
end
return
gAC[repeat⁭﻿‪.⁭⁮goto].UInt8ToUInt8s(⁭﻿⁮continue)end
function
gAC.BitConverter.Int16ToUInt8s(goto⁭‪⁪)if
goto⁭‪⁪<0
then
goto⁭‪⁪=goto⁭‪⁪+65536
end
return
gAC[repeat⁭﻿‪.⁭⁮goto].UInt16ToUInt8s(goto⁭‪⁪)end
function
gAC.BitConverter.Int32ToUInt8s(⁪and)if
⁪and<0
then
⁪and=⁪and+4294967296
end
return
gAC[repeat⁭﻿‪.⁭⁮goto][repeat⁭﻿‪.continue⁭](⁪and)end
function
gAC.BitConverter.Int64ToUInt8s(⁭‪⁮repeat)local
false⁪﻿⁪,⁮function,⁮‪⁪elseif,⁭⁭⁮repeat=gAC[repeat⁭﻿‪.⁭⁮goto][repeat⁭﻿‪.continue⁭](⁭‪⁮repeat%4294967296)local
then‪,⁪return,elseif﻿,⁪⁭until=gAC[repeat⁭﻿‪.⁭⁮goto].Int32ToUInt8s(in‪⁭﻿(⁭‪⁮repeat/4294967296))return
false⁪﻿⁪,⁮function,⁮‪⁪elseif,⁭⁭⁮repeat,then‪,⁪return,elseif﻿,⁪⁭until
end
function
gAC.BitConverter.UInt8sToInt8(until⁪)local
nil⁭=gAC[repeat⁭﻿‪.⁭⁮goto].UInt8sToUInt8(until⁪)if
nil⁭>=128
then
nil⁭=nil⁭-256
end
return
nil⁭
end
function
gAC.BitConverter.UInt8sToInt16(⁮while,not⁪)local
elseif⁭﻿=gAC[repeat⁭﻿‪.⁭⁮goto].UInt8sToUInt16(⁮while,not⁪)if
elseif⁭﻿>=32768
then
elseif⁭﻿=elseif⁭﻿-65536
end
return
elseif⁭﻿
end
function
gAC.BitConverter.UInt8sToInt32(﻿and,‪function,⁭⁮else,⁭for)local
false⁮=gAC[repeat⁭﻿‪.⁭⁮goto][repeat⁭﻿‪.repeat⁭](﻿and,‪function,⁭⁮else,⁭for)if
false⁮>=2147483648
then
false⁮=false⁮-4294967296
end
return
false⁮
end
function
gAC.BitConverter.UInt8sToInt64(﻿﻿return,⁮break,⁮⁮then,return⁮,repeat⁪,⁭‪‪continue,or‪⁪,false⁭⁮)local
⁭‪﻿nil=gAC[repeat⁭﻿‪.⁭⁮goto][repeat⁭﻿‪.repeat⁭](﻿﻿return,⁮break,⁮⁮then,return⁮)local
‪⁮⁮else=gAC[repeat⁭﻿‪.⁭⁮goto].UInt8sToInt32(repeat⁪,⁭‪‪continue,or‪⁪,false⁭⁮)return
⁭‪﻿nil+‪⁮⁮else*4294967296
end
function
gAC.BitConverter.FloatToUInt32(⁮‪⁪until)local
repeat⁮=0
if
⁮‪⁪until<0
or
1/⁮‪⁪until<0
then
repeat⁮=repeat⁮+0x80000000
⁮‪⁪until=-⁮‪⁪until
end
local
while﻿⁭‪=0
local
and﻿⁭=0
if
⁮‪⁪until==﻿⁭‪goto
then
and﻿⁭=0xFF
elseif
⁮‪⁪until~=⁮‪⁪until
then
and﻿⁭=0xFF
while﻿⁭‪=1
elseif
⁮‪⁪until==0
then
and﻿⁭=0x00
else
while﻿⁭‪,and﻿⁭=continue⁪(⁮‪⁪until)and﻿⁭=and﻿⁭+126
if
and﻿⁭<=0
then
while﻿⁭‪=in‪⁭﻿(while﻿⁭‪*2^(23+and﻿⁭)+0.5)and﻿⁭=0
else
while﻿⁭‪=in‪⁭﻿((while﻿⁭‪*2-1)*2^23+0.5)end
end
repeat⁮=repeat⁮+﻿⁮else(‪repeat(and﻿⁭,0xFF),23)repeat⁮=repeat⁮+‪repeat(while﻿⁭‪,0x007FFFFF)return
repeat⁮
end
function
gAC.BitConverter.DoubleToUInt32s(function⁪⁭⁭)local
if⁪‪⁪=0
local
‪and=0
if
function⁪⁭⁭<0
or
1/function⁪⁭⁭<0
then
if⁪‪⁪=if⁪‪⁪+0x80000000
function⁪⁭⁭=-function⁪⁭⁭
end
local
if⁭⁪=0
local
⁭⁭local=0
if
function⁪⁭⁭==﻿⁭‪goto
then
⁭⁭local=0x07FF
elseif
function⁪⁭⁭~=function⁪⁭⁭
then
⁭⁭local=0x07FF
if⁭⁪=1
elseif
function⁪⁭⁭==0
then
⁭⁭local=0x00
else
if⁭⁪,⁭⁭local=continue⁪(function⁪⁭⁭)⁭⁭local=⁭⁭local+1022
if
⁭⁭local<=0
then
if⁭⁪=in‪⁭﻿(if⁭⁪*2^(52+⁭⁭local)+0.5)⁭⁭local=0
else
if⁭⁪=in‪⁭﻿((if⁭⁪*2-1)*2^52+0.5)end
end
‪and=if⁭⁪%4294967296
if⁪‪⁪=if⁪‪⁪+﻿⁮else(‪repeat(⁭⁭local,0x07FF),20)if⁪‪⁪=if⁪‪⁪+‪repeat(in‪⁭﻿(if⁭⁪/4294967296),0x000FFFFF)return
‪and,if⁪‪⁪
end
function
gAC.BitConverter.UInt32ToFloat(break‪)local
true‪‪⁮=!1
if
break‪>=0x80000000
then
true‪‪⁮=!!1
break‪=break‪-0x80000000
end
local
﻿⁮then=⁭⁭goto(‪repeat(break‪,0x7F800000),23)local
﻿false=‪repeat(break‪,0x007FFFFF)/(2^23)local
and⁪⁮
if
﻿⁮then==0x00
then
and⁪⁮=﻿false==0
and
0
or
⁭⁮‪else(﻿false,-126)elseif
﻿⁮then==0xFF
then
and⁪⁮=﻿false==0
and
﻿⁭‪goto
or(﻿⁭‪goto-﻿⁭‪goto)else
and⁪⁮=⁭⁮‪else(1+﻿false,﻿⁮then-127)end
return
true‪‪⁮
and-and⁪⁮
or
and⁪⁮
end
function
gAC.BitConverter.UInt32sToDouble(local⁭﻿⁪,⁮⁪⁭while)local
⁮⁪break=!1
if
⁮⁪⁭while>=0x80000000
then
⁮⁪break=!!1
⁮⁪⁭while=⁮⁪⁭while-0x80000000
end
local
do⁪⁮⁪=⁭⁭goto(‪repeat(⁮⁪⁭while,0x7FF00000),20)local
⁭‪⁪true=(‪repeat(⁮⁪⁭while,0x000FFFFF)*4294967296+local⁭﻿⁪)/2^52
local
until⁪⁭⁭
if
do⁪⁮⁪==0x0000
then
until⁪⁭⁭=⁭‪⁪true==0
and
0
or
⁭⁮‪else(⁭‪⁪true,-1022)elseif
do⁪⁮⁪==0x07FF
then
until⁪⁭⁭=⁭‪⁪true==0
and
﻿⁭‪goto
or(﻿⁭‪goto-﻿⁭‪goto)else
until⁪⁭⁭=⁭⁮‪else(1+⁭‪⁪true,do⁪⁮⁪-1023)end
return
⁮⁪break
and-until⁪⁭⁭
or
until⁪⁭⁭
end